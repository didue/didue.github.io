{"componentChunkName":"component---src-templates-post-tsx","path":"/java-stream-api/","result":{"data":{"markdownRemark":{"html":"<p>Java8에서 선보인 Stream API를 근래 업무에서 너무 편하게 잘쓰고있어서 정리해보려 한다.</p>\n<p>필요의 순간에 아주 유용하게 쓸 수 있는 API니 잘 알아두자!</p>\n<h2 id=\"java-stream\" style=\"position:relative;\"><a href=\"#java-stream\" aria-label=\"java stream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java Stream</h2>\n<p>기존에 자바 Collection이나 Array의 요소를 가공할 때는 <code class=\"language-text\">loop(for, foreach)</code>를 사용해서 요소를 골라내는 작업을 했다면, <code class=\"language-text\">Stream</code>은 <strong>람다형(함수형 인터페이스)</strong> 으로 간단하게 요소를 처리할 수 있도록 한다</p>\n<p><strong>장점</strong></p>\n<ul>\n<li>코드의 양을 줄여 간결하게 표현</li>\n<li>손쉬운 병렬처리(multi-threading)</li>\n</ul>\n<br/>\n<hr>\n<br/>\n<h2 id=\"stream-사용법\" style=\"position:relative;\"><a href=\"#stream-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"stream 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stream 사용법</h2>\n<br/>\n<p style=\"font-size:16px; font-weight:bold; color:#000;\"><span style=\"background-color:#FFFF99;\">객체집합</span>.<span style=\"background-color:#00FFCC;\">스트림생성</span>.<span style=\"background-color:#CCCCFF;\">중개연산</span>.<span style=\"background-color:#66CCFF;\">최종연산</span></p>\n<p>이러한 형태의 기본문법으로 사용한다.\n<br/><br/></p>\n<h3 id=\"스트림-생성\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%83%9D%EC%84%B1\" aria-label=\"스트림 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스트림 생성</h3>\n<p><code class=\"language-text\">Collection</code>과 <code class=\"language-text\">Array</code>와 같은 <strong>객체집합</strong>으로 스트림을 생성한다.</p>\n<p>이외에도 다양한 방법으로 스트림을 생성할 수 있다.\n( ※ 참고 사이트가 도움이 될 수 있습니다😊)\n<br/><br/></p>\n<h3 id=\"중개연산\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EA%B0%9C%EC%97%B0%EC%82%B0\" aria-label=\"중개연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중개연산</h3>\n<p><code class=\"language-text\">중개연산</code>은 원소를 가공하는 연산으로서 자주 사용하게되는 메소드를 정리해보았다.\n<br/></p>\n<table style=\"border-collapse: collapse; width: 100%; height: 99px;\" border=\"1\" data-ke-style=\"style13\" data-ke-align=\"alignLeft\"><tbody><tr style=\"height: 20px;\"><td style=\"width: 16.8217%; text-align: center; height: 20px;\">Method</td><td style=\"width: 31.124%; text-align: center; height: 20px;\">Description</td><td style=\"width: 52.0542%; text-align: center; height: 20px;\">etc.</td></tr><tr style=\"height: 19px;\"><td style=\"width: 16.8217%; text-align: center; height: 19px;\">map</td><td style=\"width: 31.124%; height: 19px; text-align: left;\">특정조건의 요소의 값 반환(연산)</td><td style=\"width: 52.0542%; height: 19px; text-align: left;\">요소들의 대,소문자 변형</td></tr><tr style=\"height: 20px;\"><td style=\"width: 16.8217%; text-align: center; height: 20px;\">filter</td><td style=\"width: 31.124%; height: 20px; text-align: left;\">조건에 맞는 요소만 필터링</td><td style=\"width: 52.0542%; height: 20px; text-align: left;\">길이제한, 특정문자 포함단어 취득 등의 작업</td></tr><tr style=\"height: 20px;\"><td style=\"width: 16.8217%; text-align: center; height: 20px;\">sorted</td><td style=\"width: 31.124%; height: 20px; text-align: left;\">요소 정렬</td><td style=\"width: 52.0542%; height: 20px; text-align: left;\">요소들을 정렬&nbsp;</td></tr><tr style=\"height: 20px;\"><td style=\"width: 16.8217%; text-align: center; height: 20px;\">distinct</td><td style=\"width: 31.124%; height: 20px; text-align: left;\">요소 중복 제거</td><td style=\"width: 52.0542%; height: 20px; text-align: left;\">중복되지 않은 요소들로 정제하는 작업</td></tr></tbody></table>\n<br/><br/>\n<p><strong><em>filter()</em></strong></p>\n<p>요소에서 특정 원소를 <code class=\"language-text\">filtering</code>하는 메소드로써, <code class=\"language-text\">List</code>나 <code class=\"language-text\">Array</code>에서 원치 않게 <code class=\"language-text\">null</code>(혹은 공백 \"\")이 들어올 경우 등의 손쉽게 처리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//원래의 배열\nString[] fruits = {&quot;apple&quot;, &quot;grape&quot;, &quot;orange&quot; , null, &quot;banana&quot;, &quot;&quot;};\n//null요소를 제거된 새로운 배열\nString[] existed = {};\n\n//stream().filter()\nexisted = Arrays.stream(fruits).filter(item -&gt; isNotNull(item))\n                .toArray(String[]::new);\n                \n//결과 \n// [&quot;apple&quot;, &quot;grape&quot;, &quot;orange&quot;, &quot;banana&quot;]</code></pre></div>\n<p><br/><br/></p>\n<p><strong><em>distinct()</em></strong></p>\n<p><code class=\"language-text\">distinct</code> 메소드로 원소의 중복을 쉽게 처할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//원래의 배열\nString[] fruits = {&quot;apple&quot;, &quot;grape&quot;, &quot;orange&quot; , &quot;grape&quot;, &quot;banana&quot;, &quot;banana&quot;};\n//null요소를 제거된 새로운 배열\nList&lt;String&gt; distincted = new ArrayList&lt;&gt;();\n\n//stream().distinct()\ndistincted = Arrays.asList(elements).stream().distinct().collect(Collectors.toList());\n\n//출력\ndistincted.forEach(System.out::println);\n\n//Result :\n//apple\n//grape\n//orange\n//banana</code></pre></div>\n<br/>\n<p><strong>최종연산</strong></p>\n<p><code class=\"language-text\">최종연산</code>은 스트림 요소들을 <em>다시 모으거나, 값을 세는 등</em> 앞선 <code class=\"language-text\">중개연산</code>을 통해 가공한 <em>스트림 요소를 마무리하는 단계</em>이다.</p>\n<br/>\n<p><strong><em>collet()</em></strong></p>\n<p>스트림의 값들을 다시 모아주는 메소드.  <code class=\"language-text\">toMap</code>, <code class=\"language-text\">toSet</code>, <code class=\"language-text\">toList</code>로 다시 <code class=\"language-text\">Collection</code>으로 바꿔준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/**\n * 중복요소 제거\n * @param key\n * @param target\n * @return\n */\npublic List&lt;String&gt; distinctElements(List&lt;Map&lt;String, Object&gt;&gt; resultData, String key){ \n\t\n\tList&lt;String&gt; target = mkListFromMap(resultData, key);\n\t\n\tif(target != null){\n\t\ttarget = target.stream().filter(distinctByKey(value-&gt; value)).collect(Collectors.toList());\n\t}\n\t\n\treturn target;\n}\n\nprivate &lt;T&gt; Predicate&lt;T&gt; distinctByKey(Function&lt;? super T, Object&gt; keyExtractor) {\n\t\n\tMap&lt;Object,Boolean&gt; seen = new ConcurrentHashMap&lt;&gt;();\n\treturn t -&gt; seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\n}</code></pre></div>\n<br/>\n<p>위 코드는 최근 업무에서 Stream을 사용하여 작성한 중복요소 제거코드이다. 앞서 작성한 내용들을 응용한 부분이니 이해하여보고 다시 본인만의 스타일대로 응용해보는것도 좋을것같다^_^</p>\n<p><br/><br/>\n+) 이 글은 <a href=\"https://fascinate-zsoo.tistory.com/24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기(이전 블로그)</a>에서 옮겨왔습니다.🙋‍♀️\n<br/><br/></p>\n<hr/>\n<br/><br/>\n<p>- 참고사이트 </p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/api/index.html</a></p>\n<p><a href=\"https://futurecreator.github.io/2018/08/26/java-8-streams/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://futurecreator.github.io/2018/08/26/java-8-streams/</a></p>\n<p><a href=\"https://dpdpwl.tistory.com/81\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dpdpwl.tistory.com/81</a></p>","excerpt":"Java8에서 선보인 Stream API를 근래 업무에서 너무 편하게 잘쓰고있어서 정리해보려 한다. 필요의 순간에 아주 유용하게 쓸 수 있는 API니 잘 알아두자! Java Stream 기존에 자바 Collection이나 Array의 요소를 가공할 …","tableOfContents":"<ul>\n<li><a href=\"/java-stream-api/#java-stream\">Java Stream</a></li>\n<li>\n<p><a href=\"/java-stream-api/#stream-%EC%82%AC%EC%9A%A9%EB%B2%95\">Stream 사용법</a></p>\n<ul>\n<li><a href=\"/java-stream-api/#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%83%9D%EC%84%B1\">스트림 생성</a></li>\n<li><a href=\"/java-stream-api/#%EC%A4%91%EA%B0%9C%EC%97%B0%EC%82%B0\">중개연산</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/java-stream-api/"},"frontmatter":{"title":"Java8 스트림(Stream)API - map/filter/distinct","date":"Jul 23, 2021","tags":["Java"],"keywords":["Java","Java8","Stream"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/java-stream-api/","series":[],"lastmod":"2021-07-23"}},"staticQueryHashes":["2027115977","694178885"]}