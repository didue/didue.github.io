{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\n개인프로젝트 또는 현업에서 종종 [공공데이터포털](https://www.data.go.kr/)의 데이터를 활용할 일이 꽤나 있습니다.\r\n\r\n특히 최근에는 지도API를 활용한 업무가 많아졌습니다.\r\n\r\n그런데..! 데이터 제공처마다 <span style=\"color:cornflowerblue;\">*각각 다른 좌표 투영계를 사용*</span>하여 좌표를 제공하여 (~~표준통일같은건 없는거니..~~)\r\n\r\n현재 사용중인 카카오맵SDK에서 기본으로하는 위경도 좌표계(위도 38.xxxx, 경도 126.xxx의 표시방법)로 좌표계 변환이 필요했습니다.\r\n\r\n사실 지도 투영과 좌표계에 대한 내용은 GIS에 대한 좀 더 깊은 공부가 필요하지만, 저는 라이브러리를 사용하여 빠르고 간단하게 변환하는 방법을 선택해보겠습니다.😏\r\n\r\n<br/>\r\n\r\n---\r\n\r\n<br/>\r\n\r\n사용한 라이브러리는 `proj.js`라는 JavaScript 라이브러리로 `지리 좌표 변환 소프트웨어`입니다.\r\n\r\n현재는 8버전까지 나와있으나, 릴리즈 4버전으로도 충분하여 `proj4`를 사용하도록 하겠습니다.\r\n<br/><br/>\r\n변환하실 <b>좌표계의 EPSG 코드는 [여기](http://www.gisdeveloper.co.kr/?p=8942)를 참고</b>하시면 됩니다!\r\n\r\n<br/><br/>\r\n\r\n## **Node.js 샘플코드**\r\n<br/>\r\n\r\n`node.js` 환경에서 사용할 경우 npm으로 `proj4` 라이브러리를 설치해줍니다.\r\n```\r\nnpm install --save proj4\r\n```\r\n<br/>\r\n\r\n`proj.js`의 기본구문은 아래와 같습니다.\r\n```\r\nlet coord = proj4(proj4(fromProjection, toProjection, coordinates);\r\n\r\n//fromProjection : 변환 대상 좌표계\r\n//toProjection : 변환 목표 좌표계\r\n//coordinates : 객체 또는 배열 형태 (예시 {x:'x', y:'y'} 또는 [x,y]) \r\n```\r\n<br/>\r\n\r\n기본구문을 바탕으로 좌표변환하는 코드는 아래처럼 활용할 수 있습니다.\r\n```\r\nvar proj4 = require('proj4');\r\n\r\n//UTM-K 좌표계\r\nvar eps2097 = \"+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs\";\r\n//GRS80(중부원점) 좌표계\r\nvar grs80 = \"+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m +no_defs\";\r\n//wgs84(위경도)좌표계\r\nvar wgs84 = \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\";\r\n\r\nvar grs80P = proj4(grs80, wgs84, [893204, 1652210]);\r\nconsole.log(grs80P);\r\n\r\nvar eps2097p = proj4(eps2097, wgs84, [188387.5628, 183119.8984]);\r\nconsole.log(eps2097p);\r\n```\r\n<br/><br/>\r\n\r\n## **Java 샘플코드**\r\n<br/>\r\n\r\n아래의 External JAR파일을 lib폴더에 import하시고 사용하시면 `proj4`를 `Java`환경에서 이용하실 모든 준비가 끝났습니다.😄\r\n<br/><br/>\r\n\r\n`jar파일`은 [여기(이전 블로그)](https://fascinate-zsoo.tistory.com/24)에 가시면 다운받으실 수 있습니다!😎\r\n<br/><br/>\r\n\r\n\r\n`proj` 기본 구문은 동일하며 `Java`에서는 `ProjCoordinate` 클래스를 이용하여 좌표를 변환합니다!\r\n\r\n```\r\nimport org.locationtech.proj4j.BasicCoordinateTransform;\r\nimport org.locationtech.proj4j.CRSFactory;\r\nimport org.locationtech.proj4j.CoordinateReferenceSystem;\r\nimport org.locationtech.proj4j.ProjCoordinate;\r\n\r\npublic class TransCoord {\r\n\r\n  public ProjCoordinate transform(String strLon, String strLat) {\r\n\r\n    //parse to Double\r\n    Double dblLon = Double.parseDouble(strLon);\r\n    Double dblLat = Double.parseDouble(strLat);\r\n\t\t\t\r\n    CRSFactory factory = new CRSFactory();\r\n    CoordinateReferenceSystem grs80 = factory.createFromName(\"EPSG:5179\"); \r\n    CoordinateReferenceSystem wgs84 = factory.createFromName(\"EPSG:4326\");\r\n    BasicCoordinateTransform transformer = new BasicCoordinateTransform(grs80, wgs84);\r\n\t\r\n    ProjCoordinate beforeCoord = new ProjCoordinate(dblLon, dblLat);\r\n    ProjCoordinate afterCoord = new ProjCoordinate();\r\n    \r\n    //변환된 좌표 \r\n    System.out.println(afterCoord.x + \",\" + afterCoord.y);\r\n    \r\n    return transformer.transform(beforeCoord, afterCoord);\r\n  }\r\n  \r\n}\r\n```\r\n<br/><br/>\r\n\r\n---\r\n\r\n<br/>\r\n좌표변환 코드를 보면 세상짧고 별거없어 보이는 코드이지만....\r\n\r\n저 라이브러리와 코드를 찾기위해 몇번이고 구글을 떠돌던 며칠전의 저와 같은 모습을 하고 계실 또 다른 분들이 도움이 되셨기를...!🙋‍♀️\r\n\r\n<br/><br/>\r\n+) 이 글은 [여기(이전 블로그)](https://fascinate-zsoo.tistory.com/24)에서 옮겨왔습니다.","excerpt":"개인프로젝트 또는 현업에서 종종 공공데이터포털의 데이터를 활용할 일이 꽤나 있습니다. 특히 최근에는 지도API를 활용한 업무가 많아졌습니다. 그런데..! 데이터 제공처마다 각각 다른 좌표 투영계를 사용하여 좌표를 제공하여 (표준통일같은건 없는거니..…","fields":{"slug":"/proj4활용기/"},"frontmatter":{"date":"Jul 23, 2021","title":"proj4.js로 좌표계 변환하기 (중분원점 좌표계 > WGS84 좌표계)","tags":["Javascript","proj4"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n![consolelog](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FRL3DB%2Fbtq8UeXRCxu%2FRwi4Bc26JFQtm7wCDnPPy0%2Fimg.gif)\r\n<br/><br/>\r\n드림코딩 엘리님의 유튜브를 보고 기억하기위해 적어두는 TIL\r\n<br/><br/>\r\n\r\n# **Console 제대로 알고쓰기**\r\n\r\n<br/>\r\n\r\n콘솔로그의 기본 로그레벨에 따른 `method`<br/><br/>\r\n\r\n```\r\nconst cat = {type : '😺' name : 'Ori', owner : {name: 'didue'}}\r\nconsole.log('logging' , cat);\r\n\r\n//log level\r\nconsole.log();   //개발 출력 => 배포시 삭제\r\nconsole.info();  //정보 출력 => 배포시 삭제 \r\nconsole.warn();  //경보 \r\nconsole.error(); //에러! 시스템 에러\r\n```\r\n<br/><br/>\r\n\r\n`특정 조건이 일치`할 때만 로그를 출력하고 싶을 경우\r\n```\r\n//assert \r\nconsole.assert(2 === 3, 'not samae!')\r\nconsole.assert(2 === 2, 'same!')\r\n```\r\n<br/><br/>\r\n\r\n`Object`를 더 스마트하게 가독성있게 출력하기\r\n```\r\n//print object\r\nconsole.table(cat);\r\nconsole.dir(dog, {color: false, depth : 0});\r\n```\r\n<br/><br/>\r\n\r\n수행시간 측정 하기\r\n```\r\nconsole.time('for loop');\r\n//working\r\nconsole.timeEnd('for loop');\r\n\r\n//output : for loop 0.053ms\r\n```\r\n<br/><br/>\r\n\r\n스마트하게 `카운팅` 하기\r\n```\r\n//old\r\nlet count = 0;\r\nfunction a(){\r\n    count++;\r\n}\r\na();\r\na();\r\na();\r\nconsole.log(count);\r\ncount = 0;\r\n\r\n//new\r\nfunction a(){\r\n    console.count('a function');\r\n}\r\na();\r\na();\r\na();\r\nconsole.countReset('a function');\r\n```\r\n<br/><br/>\r\n\r\n함수 어디에서 호출했는지 `tracing`하기\r\n```\r\nfunction f1(){\r\n    f2();\r\n}\r\nfunction f2(){\r\n    f3();\r\n}\r\nfunction f3(){\r\n    console.trace();\r\n}\r\nf1();\r\n```\r\n<br/><br/>\r\n---\r\n\r\n### 출처\r\n\r\n\\- MDN : Console [https://developer.mozilla.org/ko/docs/Web/API/Console](https://developer.mozilla.org/ko/docs/Web/API/Console)\r\n\r\n\\- Node.js : Console [https://nodejs.org/dist/latest-v14.x/docs/api/console.html](https://nodejs.org/dist/latest-v14.x/docs/api/console.html)\r\n\r\n\\- 드림코딩 유튜브 [https://youtu.be/KxsVV5jbJe4](https://youtu.be/KxsVV5jbJe4)","excerpt":"consolelog\n\n드림코딩 엘리님의 유튜브를 보고 기억하기위해 적어두는 TIL\n Console 제대로 알고쓰기 콘솔로그의 기본 로그레벨에 따른   할 때만 로그를 출력하고 싶을 경우  를 더 스마트하게 가독성있게 출력하기  수행시간 측정 하기  …","fields":{"slug":"/TIL-console/"},"frontmatter":{"date":"Jul 23, 2021","title":"(TIL#2) Console 제대로 알고 쓰기 (with 드림코딩)","tags":["TIL","JavaScript","Console"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## null 병합 연산자 '??'\r\n\r\n\r\n<br/><br/>\r\n![null](https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F995C434C5C07CDA015)\r\n<br/><br/>\r\nnull 병합 연산자 `??`를 사용하면 짧은 문법으로 여러 연산자 중 그 값이 '확정'되어 있는 변수를 찾을 수 있습니다. \r\n<br/><br/>\r\n`x` 변수의 값은 변수 `a`가 `null`도 아니고  `undefined`가 아니면 `a`가, \r\n그렇지 않을 경우는 `b`가 되도록 하고자 할 때<br/>\r\n우리는 구식 문법으로 아래와 코드를 작성했습니다. \r\n<br/><br/>\r\n\r\n```\r\n//old\r\n//if~else문\r\nlet x;\r\nif(a !== null && a!== undefined){\r\n    x = a;\r\n}else {\r\n    x = b;\r\n}\r\n\r\nor \r\n\r\n//삼항연산자\r\nlet x = (a !== null && a!== undefined)? a : b;\r\n```\r\n\r\n<br/>\r\n`if~else` 문 또는 비교연산자와 논리연산자를 사용하면 코드길이가 길어져 가독성이 떨어지게 됩니다.<br/>\r\n이 때, null 병합연산자 `??` 사용해서 코드를 작성하면 이렇게 표현할 수 있습니다. <br/>\r\n<br/>\r\n\r\n```\r\n//new\r\nlet x = a ?? b;\r\n```\r\n<br/><br/>\r\n\r\n### 연산자 우선순위 \r\n\r\n`??` 연산자는 `5번째 우선순위`로 꽤 낮습니다.\r\n그렇기 때문에 연산자가 복잡한 표현식안에서는 `괄호`를 사용하여 표현하는 방법이 좋습니다. <br/>\r\n<br/><br/>\r\n\r\n`??`연산자는 javascript 스펙에 추가된 지 얼마 안 된 문법으로, 구식 브라우저(~~인터넷 익스플로러 라거나....IE라거나...~~)에서는 바벨과 같은 폴리필이 필요합니다.<br/><br/>\r\n\r\n또한 `??` 연산자에는 자바스크립트 언어에서 규정한 `제약사항`이 있습니다.<br/>\r\n<b>안전성 관련 이슈 때문에 `??`연산자는 `&&(AND)`나 `||(OR)`연산자와 함께 사용할수 없습니다.</b><br/><br/>\r\n\r\n\r\n```\r\n//Syntax Error : Uxexpected token '??'\r\nlet x = 1 && 2 ?? 3;\r\n```\r\n<br/>제약을 피하려면 아래 예시처럼 `괄호`를 사용할 수 있습니다. <br/><br/>\r\n\r\n```\r\nlet x = (1 && 2) ?? 3;\r\nconsole.log(x);         //2\r\n```\r\n","excerpt":"null 병합 연산자 '??' \nnull\n\nnull 병합 연산자 를 사용하면 짧은 문법으로 여러 연산자 중 그 값이 '확정'되어 있는 변수를 찾을 수 있습니다. \n\n 변수의 값은 변수 가 도 아니고  가 아니면 가, \n그렇지 않을 경우는 가 되도록 …","fields":{"slug":"/TIL/"},"frontmatter":{"date":"Jul 23, 2021","title":"(TIL#1) 모던Javascript - null 병합연산자 ??","tags":["TIL","JavaScript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n![POSTGRESQL](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdfhdXW%2Fbtq665WfGR8%2FQX4BBDAwhiz52sGi08Ychk%2Fimg.png)\r\n<br/><br/>\r\n\r\nPostgreSQL에는 `DML(INSERT, UPDATE, DELETE)` 실행 후, affected rows 갯수 대신 정보를 반환해주는 구문이 있다.\r\n\r\n그것이 바로 `RETURNING` 구문이다\r\n\r\n사용방법은 **아주아주** 간단하다!!  \r\n\r\n`INSERT, UPDATE, DELETE`문 뒤에 `RETURNING *` 을 쓰면 실행 결과 ROWS를 반환한다.  \r\n\r\n<br/>\r\n\r\n이 흥미로운 문법을 아래의 활용 예제를 보면서 `RETURNING` 을 어떻게 쓸 수 있는지 자세히 살펴보자👩🤟\r\n\r\n<br/>\r\n\r\n---\r\n\r\n## Examples\r\n<br/>\r\n\r\n### 활용1. SELECT KEY\r\n<br/>\r\n\r\n`spring` 환경에서 우리는 `insert(혹은 update)`에서 SQL 실행 후 특정 값을 반환하고 싶을 때, \r\n대게의 경우에 mybatis(혹은 ibatis)의 `<selectKey>`를 이용하여 이렇게 썼을 것이다.\r\n```\r\n//old\r\n<insert>\r\n    INSERT INTO BOARD(BOARD_ID, TITLE, CONTENT)\r\n    VALUES('A01', '게시글 타이틀', '게시글 내용')\r\n    <selectKey keyProperty=\"\" resultType=\"\" order=\"AFTER\" >\r\n        SELECT BOARD_ID\r\n    </selectKey>        \r\n</insert>\r\n```\r\n<br/><br/>\r\n\r\n하지만 `PostgreSQL` 에서는 mybatis없이 이렇게도 쓸 수 있다!\r\n\r\n```\r\n//new\r\n<insert>\r\n    INSERT INTO BOARD(BOARD_ID, TITLE, CONTENT)\r\n    VALUES('A01', '게시글 타이틀', '게시글 내용')\r\n    RETURNING BOARD_ID\r\n</insert>\r\n```\r\n<br/><br/>\r\n\r\n확실히 `insert`안에 `select`가 들어가있는것 보다 가독성도 좋아보이고,  \r\n`반환(RETURNING)`한다는 의미와 해달 컬럼이 더 잘 전달된다.\r\n<br/><br/>\r\n\r\n![https://jjalbot.com/media/2020/03/QPPbAIEl7V/SY9jdwKFd.jpeg](https://jjalbot.com/media/2020/03/QPPbAIEl7V/SY9jdwKFd.jpeg)\r\n\r\n편안~\r\n<br/><br/><br/>\r\n\r\n### 활용2. UPSERT\r\n<br/>\r\n\r\n두번째 활용 예는 `UPSERT`이다. <br/>\r\n많은 사용자들이 알듯이 PostgreSQL에는 오라클의 `MERGE`문이 없다 T-T  \r\n그래서 오라클의 그것과 같은 동작을 위해 우리는 PostgreSQL의 `WITH`를 활용할 수 있다.\r\n\r\n<br/>\r\n\r\n```\r\n//update할 row가 없으면 insert 하는 upsert(merge)문\r\n\r\nWITH UPSERT AS (                            \r\n    UPDATE BOARD\r\n    SET TITLE = '게시글 타이틀 수정'\r\n        , CONTENT = '게시글 내용 수정'\r\n    WHERE BOARD_ID = 'A01'\r\n    RETURNING *\r\n)\r\nINSERT INTO BOARD(\r\n    BOARD_ID\r\n    , TITLE\r\n    , CONTENT\r\n)\r\nSELECT\r\n    BOARD_ID\r\n    , TITLE\r\n    , CONTENT\r\nWHERE NOT EXISTS ( SELECT * FROM UPSERT )\r\n```\r\n<br/><br/>\r\n\r\n\r\nPostgreSQL의 `UPSERT`문은 [여기](https://didue.github.io/postgresql-upsert/)에서 이전에 한번 다룬적이 있으니, 두 SQL을 비교해보면서 본인의 상황에 적절한 것을 골라서 써볼 수 있도록 하자!\r\n<br/><br/>\r\n+) 이 글은 [여기(이전 블로그)](https://fascinate-zsoo.tistory.com/24)에서 옮겨왔습니다.🙋‍♀️\r\n<br/><br/>\r\n\r\n---\r\n\r\n#### **참고**\r\n\r\n-   PostgreSQL With : [https://www.postgresql.org/docs/9.4/queries-with.html](https://www.postgresql.org/docs/9.4/queries-with.html)\r\n-   PostgreSQL Insert Multi-Rows : [https://www.postgresqltutorial.com/postgresql-insert-multiple-rows/](https://www.postgresqltutorial.com/postgresql-insert-multiple-rows/)","excerpt":"POSTGRESQL\n PostgreSQL에는  실행 후, affected rows 갯수 대신 정보를 반환해주는 구문이 있다. 그것이 바로  구문이다 사용방법은 아주아주 간단하다!!   문 뒤에  을 쓰면 실행 결과 ROWS를 반환한다.   이 흥미로…","fields":{"slug":"/postgresql-returning/"},"frontmatter":{"date":"Jul 23, 2021","title":"(Postgresql) Returning 구문 정보 리턴 받기","tags":[],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n`JavaScript` 또는 `jQuery`에서 `querySelectorAll()`을 사용할 때<br/>\r\n와일드카드를 이용하여 *패턴으로 탐색*하고 싶은 경우엔 아래와 같이 사용해보자!\r\n\r\n<br/><br/>\r\n\r\n**~로 시작하는 요소**  `^`\r\n\r\n```\r\n//JavaScript\r\ndocument.querySelectorAll(\"[id^='abc']\");\r\n\r\n//jQuery\r\n$(\"[id^='abc']\");\r\n```\r\n\r\n**~로 끝나는 요소** `$`\r\n\r\n```\r\n//JavaScript\r\ndocument.querySelectorAll(\"[id$='abc']\");\r\n\r\n//jQuery\r\n$(\"[id$='abc']\");\r\n```\r\n\r\n**~를 포함하는 요소** `*`\r\n\r\n```\r\n//JavaScript\r\ndocument.querySelectorAll(\"[id*='abc']\");\r\n\r\n//jQuery\r\n$(\"[id*='abc']\");\r\n```\r\n\r\n<br/>\r\n\r\n---\r\n\r\n<br/>\r\n\r\n아래 이미지는 `와일드카드`를 사용하여 지난 프로젝트의 레거시 코드를 아주 조금 리팩토링했었던 코드이다. 👻\r\n\r\n<br/>\r\n\r\n\r\n![null](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FkVCvG%2FbtqE81F1Iox%2Fp3kVAWDJNMLRWXzQR5WxKk%2Fimg.png)\r\n\r\n<br/>\r\n\r\n50라인정도가 되는 하드코딩(?)스러운 코드를 단 8줄로 리팩토링했다. 개인적으론 라인이 줄어듦으로써 이전보다 가독성도 좋아졌다고 생각한다.\r\n<br/>\r\n\r\n한가지 아쉬웠던것은 Element의 ID를 좀 더 상세한 패턴있게 작명했더라면 (Cnt라는 단어만으로는 다른데에서도 자주 사용되고 있기때문에 좋지못했다....)\r\n*어쩌면 한줄로도 가능하지않았을까* 하는 약간의 아쉬움..이 좀 남는다🤔\r\n\r\n<br/><br/>\r\n<hr/>\r\n<br/><br/>\r\n+) 이 글은 [여기(이전 블로그)](https://fascinate-zsoo.tistory.com/24)에서 옮겨왔습니다.🙋‍♀️\r\n<br/><br/>\r\n","excerpt":"또는 에서 을 사용할 때\n와일드카드를 이용하여 패턴으로 탐색하고 싶은 경우엔 아래와 같이 사용해보자!  ~로 시작하는 요소   ~로 끝나는 요소  ~를 포함하는 요소  아래 이미지는 를 사용하여 지난 프로젝트의 레거시 코드를 아주 조금 리팩토링했었던…","fields":{"slug":"/javascript-wildcard/"},"frontmatter":{"date":"Jul 23, 2021","title":"Javascript/jQuery Selector에서 와일드카드 사용하기","tags":["JavaScript","selector","wildcard"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\nJava8에서 선보인 Stream API를 근래 업무에서 너무 편하게 잘쓰고있어서 정리해보려 한다.\r\n\r\n필요의 순간에 아주 유용하게 쓸 수 있는 API니 잘 알아두자!\r\n\r\n\r\n## Java Stream\r\n\r\n기존에 자바 Collection이나 Array의 요소를 가공할 때는 `loop(for, foreach)`를 사용해서 요소를 골라내는 작업을 했다면, `Stream`은 **람다형(함수형 인터페이스)** 으로 간단하게 요소를 처리할 수 있도록 한다\r\n\r\n\r\n\r\n**장점**\r\n\r\n- 코드의 양을 줄여 간결하게 표현\r\n- 손쉬운 병렬처리(multi-threading)\r\n\r\n<br/>\r\n\r\n---\r\n<br/>\r\n\r\n## Stream 사용법\r\n<br/>\r\n\r\n<p style=\"font-size:16px; font-weight:bold; color:#000;\"><span style=\"background-color:#FFFF99;\">객체집합</span>.<span style=\"background-color:#00FFCC;\">스트림생성</span>.<span style=\"background-color:#CCCCFF;\">중개연산</span>.<span style=\"background-color:#66CCFF;\">최종연산</span></p>\r\n\r\n\r\n이러한 형태의 기본문법으로 사용한다.\r\n<br/><br/>\r\n\r\n\r\n### 스트림 생성\r\n\r\n`Collection`과 `Array`와 같은 **객체집합**으로 스트림을 생성한다.\r\n\r\n이외에도 다양한 방법으로 스트림을 생성할 수 있다.\r\n( ※ 참고 사이트가 도움이 될 수 있습니다😊)\r\n<br/><br/>\r\n\r\n### 중개연산\r\n\r\n`중개연산`은 원소를 가공하는 연산으로서 자주 사용하게되는 메소드를 정리해보았다.\r\n<br/>\r\n\r\n<table style=\"border-collapse: collapse; width: 100%; height: 99px;\" border=\"1\" data-ke-style=\"style13\" data-ke-align=\"alignLeft\"><tbody><tr style=\"height: 20px;\"><td style=\"width: 16.8217%; text-align: center; height: 20px;\">Method</td><td style=\"width: 31.124%; text-align: center; height: 20px;\">Description</td><td style=\"width: 52.0542%; text-align: center; height: 20px;\">etc.</td></tr><tr style=\"height: 19px;\"><td style=\"width: 16.8217%; text-align: center; height: 19px;\">map</td><td style=\"width: 31.124%; height: 19px; text-align: left;\">특정조건의 요소의 값 반환(연산)</td><td style=\"width: 52.0542%; height: 19px; text-align: left;\">요소들의 대,소문자 변형</td></tr><tr style=\"height: 20px;\"><td style=\"width: 16.8217%; text-align: center; height: 20px;\">filter</td><td style=\"width: 31.124%; height: 20px; text-align: left;\">조건에 맞는 요소만 필터링</td><td style=\"width: 52.0542%; height: 20px; text-align: left;\">길이제한, 특정문자 포함단어 취득 등의 작업</td></tr><tr style=\"height: 20px;\"><td style=\"width: 16.8217%; text-align: center; height: 20px;\">sorted</td><td style=\"width: 31.124%; height: 20px; text-align: left;\">요소 정렬</td><td style=\"width: 52.0542%; height: 20px; text-align: left;\">요소들을 정렬&nbsp;</td></tr><tr style=\"height: 20px;\"><td style=\"width: 16.8217%; text-align: center; height: 20px;\">distinct</td><td style=\"width: 31.124%; height: 20px; text-align: left;\">요소 중복 제거</td><td style=\"width: 52.0542%; height: 20px; text-align: left;\">중복되지 않은 요소들로 정제하는 작업</td></tr></tbody></table>\r\n<br/><br/>\r\n\r\n\r\n**_filter()_**\r\n\r\n요소에서 특정 원소를 `filtering`하는 메소드로써, `List`나 `Array`에서 원치 않게 `null`(혹은 공백 \"\")이 들어올 경우 등의 손쉽게 처리할 수 있습니다.\r\n```\r\n//원래의 배열\r\nString[] fruits = {\"apple\", \"grape\", \"orange\" , null, \"banana\", \"\"};\r\n//null요소를 제거된 새로운 배열\r\nString[] existed = {};\r\n\r\n//stream().filter()\r\nexisted = Arrays.stream(fruits).filter(item -> isNotNull(item))\r\n                .toArray(String[]::new);\r\n                \r\n//결과 \r\n// [\"apple\", \"grape\", \"orange\", \"banana\"]\r\n```\r\n<br/><br/>\r\n\r\n**_distinct()_**\r\n\r\n`distinct` 메소드로 원소의 중복을 쉽게 처할 수 있습니다.\r\n```\r\n//원래의 배열\r\nString[] fruits = {\"apple\", \"grape\", \"orange\" , \"grape\", \"banana\", \"banana\"};\r\n//null요소를 제거된 새로운 배열\r\nList<String> distincted = new ArrayList<>();\r\n\r\n//stream().distinct()\r\ndistincted = Arrays.asList(elements).stream().distinct().collect(Collectors.toList());\r\n\r\n//출력\r\ndistincted.forEach(System.out::println);\r\n\r\n//Result :\r\n//apple\r\n//grape\r\n//orange\r\n//banana\r\n```\r\n<br/>\r\n\r\n**최종연산**\r\n\r\n`최종연산`은 스트림 요소들을 *다시 모으거나, 값을 세는 등* 앞선 `중개연산`을 통해 가공한 *스트림 요소를 마무리하는 단계*이다.\r\n\r\n<br/>\r\n\r\n**_collet()_**\r\n\r\n스트림의 값들을 다시 모아주는 메소드.  `toMap`, `toSet`, `toList`로 다시 `Collection`으로 바꿔준다.\r\n\r\n```\r\n/**\r\n * 중복요소 제거\r\n * @param key\r\n * @param target\r\n * @return\r\n */\r\npublic List<String> distinctElements(List<Map<String, Object>> resultData, String key){ \r\n\t\r\n\tList<String> target = mkListFromMap(resultData, key);\r\n\t\r\n\tif(target != null){\r\n\t\ttarget = target.stream().filter(distinctByKey(value-> value)).collect(Collectors.toList());\r\n\t}\r\n\t\r\n\treturn target;\r\n}\r\n\r\nprivate <T> Predicate<T> distinctByKey(Function<? super T, Object> keyExtractor) {\r\n\t\r\n\tMap<Object,Boolean> seen = new ConcurrentHashMap<>();\r\n\treturn t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\r\n}\r\n```\r\n<br/>\r\n\r\n위 코드는 최근 업무에서 Stream을 사용하여 작성한 중복요소 제거코드이다. 앞서 작성한 내용들을 응용한 부분이니 이해하여보고 다시 본인만의 스타일대로 응용해보는것도 좋을것같다^\\_^\r\n\r\n<br/><br/>\r\n+) 이 글은 [여기(이전 블로그)](https://fascinate-zsoo.tistory.com/24)에서 옮겨왔습니다.🙋‍♀️\r\n<br/><br/>\r\n<hr/>\r\n<br/><br/>\r\n\r\n\\- 참고사이트 \r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/index.html\r\n\r\nhttps://futurecreator.github.io/2018/08/26/java-8-streams/\r\n\r\nhttps://dpdpwl.tistory.com/81","excerpt":"Java8에서 선보인 Stream API를 근래 업무에서 너무 편하게 잘쓰고있어서 정리해보려 한다. 필요의 순간에 아주 유용하게 쓸 수 있는 API니 잘 알아두자! Java Stream 기존에 자바 Collection이나 Array의 요소를 가공할 …","fields":{"slug":"/java-stream-api/"},"frontmatter":{"date":"Jul 23, 2021","title":"Java8 스트림(Stream)API - map/filter/distinct","tags":["Java","Java8","Stream"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\nList가 없이 에디터 하나로 insert/update를 해야하는 게시판을 작성하는 업무가 있어서 찾아보다가 `UPSERT`라는 것을 알게 되었다!\r\n\r\n`UPSERT` 는 일종의 `MERGE`문 같은 개념으로(~~postgresql은 merge가 없음......~~)\r\n**행이 없으면(존재하지않으면) INSERT하고 존재하면 UPDATE하는 문법**이다.\r\n\r\n<br/>\r\nPostgresQL의 공식 Document에 내용이 너무 잘 정리되어있어서 그 내용을 정리하며 복습해보려 한다.\r\n<br/>\r\n\r\n---\r\n\r\n<br/>\r\n\r\n## PostgresQL의 UPSERT\r\n<br/>\r\n\r\npostgresQL에서 사용하는 UPSERT문법은 아래와 같다!\r\n\r\n`Insert`문 다음에 존재하는지 확인할 `target`과 타겟 확인 이후 `action` 순으로 작성한다.\r\n기본 구문 형태는 아래와 같이 사용한다.\r\n```\r\nINSERT INTO table_name(column_list) \r\nVALUES(value_list)\r\nON CONFLICT target action;\r\n```\r\n<br/>\r\n\r\n\r\n### Target\r\n\r\n-   (column name) : 컬럼명\r\n-   ON CONSTRAINT 제약이름 : unique 제약의 이름\r\n-   WHERE 절\r\n\r\n### Action\r\n\r\n-   DO NOTIHING : 아무것도 수행하지 않음\r\n-   DO UPDATE SET ~~~ : 테이블 일부 필드의 업데이트\r\n\r\n<br/>\r\n\r\n\r\n※ ON CONFLICT절은 PostgresQL9.5 이상에서만 사용할 수 있다!\r\n<br/><br/><br/>\r\n\r\n---\r\n\r\n<br/>\r\n\r\n\r\n## Example\r\n<br/>\r\n\r\n\r\n이제 예제를 보면서 이해해보자. 아래 `DDL`문에서 정의하는 <b>customers라는 테이블</b>이 있다고 할 때\r\n\r\n```\r\nDROP TABLE IF EXISTS customers;\r\n\r\nCREATE TABLE customers (\r\n    customer_id serial PRIMARY KEY,\r\n    name VARCHAR UNIQUE,\r\n    email VARCHAR NOT NULL,\r\n    active bool NOT NULL DEFAULT TRUE\r\n);\r\n```\r\n<br/>\r\n\r\n`unique` 속성이 있는 name 컬럼의 값이 이미 존재한다면, 아무것도 수행하지 않도록하는 SQL은 아래와 같이 쓸 수 있다.\r\n\r\n```\r\nINSERT INTO customers (NAME, email)\r\nVALUES('Microsoft','hotline@microsoft.com') \r\nON CONFLICT ON CONSTRAINT customers_name_key \r\nDO NOTHING;\r\n```\r\n<br/><br/>\r\n\r\n제약조건말고 컬럼명(name)으로도 동일한 수행을 하도록 작성할 수 있다.\r\n```\r\nINSERT INTO customers (name, email)\r\nVALUES('Microsoft','hotline@microsoft.com') \r\nON CONFLICT (name) \r\nDO NOTHING;\r\n```\r\n<br/><br/>\r\n\r\n마지막으로 이미 존재하는 대상에 대해서는 `UPDATE`하도록\r\n`ACTION`을 주는 SQL은 `DO 절` 뒤에 수행될 UPDATE문을 작성하면 된다!\r\n```\r\nINSERT INTO customers (name, email)\r\nVALUES('Microsoft','hotline@microsoft.com') \r\nON CONFLICT (name) \r\nDO \r\n   UPDATE SET email = EXCLUDED.email || ';' || customers.email;\r\n```\r\n<br/><br/>\r\n\r\n---\r\n\r\n<br/><br/>\r\n\r\n(+) 개인적으로 현업에서 `ON CONFLICT`보다 더 자주 사용하는  \r\n`RETURNING`문을 활용한 UPSERT도 있으니 비교해보고 상황에 맞는것을 사용해보자!\r\n\r\n\r\n[\\[PostgreSQL\\] Returning 구문으로 정보 리턴 받기\r\n](https://didue.github.io/postgresql-returning/)\r\n\r\n<br/><br/>\r\n+) 이 글은 [여기(이전 블로그)](https://fascinate-zsoo.tistory.com/24)에서 옮겨왔습니다.🙋‍♀️\r\n<br/><br/>\r\n\r\n---\r\n<br/><br/>\r\n\r\n### 참고\r\n\r\n-   [PostgresQL API Document](https://www.postgresqltutorial.com/postgresql-upsert/)","excerpt":"List가 없이 에디터 하나로 insert/update를 해야하는 게시판을 작성하는 업무가 있어서 찾아보다가 라는 것을 알게 되었다!  는 일종의 문 같은 개념으로(postgresql은 merge가 없음......)\n행이 없으면(존재하지않으면) IN…","fields":{"slug":"/postgresql-upsert/"},"frontmatter":{"date":"Jul 23, 2021","title":"(Postgresql) UPSERT 사용하기","tags":[],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}