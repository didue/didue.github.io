{"componentChunkName":"component---src-templates-post-tsx","path":"/postgresql-upsert/","result":{"data":{"markdownRemark":{"html":"<p>List가 없이 에디터 하나로 insert/update를 해야하는 게시판을 작성하는 업무가 있어서 찾아보다가 <code class=\"language-text\">UPSERT</code>라는 것을 알게 되었다!</p>\n<p><code class=\"language-text\">UPSERT</code> 는 일종의 <code class=\"language-text\">MERGE</code>문 같은 개념으로(<del>postgresql은 merge가 없음......</del>)\n<strong>행이 없으면(존재하지않으면) INSERT하고 존재하면 UPDATE하는 문법</strong>이다.</p>\n<br/>\nPostgresQL의 공식 Document에 내용이 너무 잘 정리되어있어서 그 내용을 정리하며 복습해보려 한다.\n<br/>\n<hr>\n<br/>\n<h2 id=\"postgresql의-upsert\" style=\"position:relative;\"><a href=\"#postgresql%EC%9D%98-upsert\" aria-label=\"postgresql의 upsert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PostgresQL의 UPSERT</h2>\n<br/>\n<p>postgresQL에서 사용하는 UPSERT문법은 아래와 같다!</p>\n<p><code class=\"language-text\">Insert</code>문 다음에 존재하는지 확인할 <code class=\"language-text\">target</code>과 타겟 확인 이후 <code class=\"language-text\">action</code> 순으로 작성한다.\n기본 구문 형태는 아래와 같이 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">INSERT INTO table_name(column_list) \nVALUES(value_list)\nON CONFLICT target action;</code></pre></div>\n<br/>\n<h3 id=\"target\" style=\"position:relative;\"><a href=\"#target\" aria-label=\"target permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Target</h3>\n<ul>\n<li>(column name) : 컬럼명</li>\n<li>ON CONSTRAINT 제약이름 : unique 제약의 이름</li>\n<li>WHERE 절</li>\n</ul>\n<h3 id=\"action\" style=\"position:relative;\"><a href=\"#action\" aria-label=\"action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action</h3>\n<ul>\n<li>DO NOTIHING : 아무것도 수행하지 않음</li>\n<li>DO UPDATE SET ~~~ : 테이블 일부 필드의 업데이트</li>\n</ul>\n<br/>\n<p>※ ON CONFLICT절은 PostgresQL9.5 이상에서만 사용할 수 있다!\n<br/><br/><br/></p>\n<hr>\n<br/>\n<h2 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<br/>\n<p>이제 예제를 보면서 이해해보자. 아래 <code class=\"language-text\">DDL</code>문에서 정의하는 <b>customers라는 테이블</b>이 있다고 할 때</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">DROP TABLE IF EXISTS customers;\n\nCREATE TABLE customers (\n    customer_id serial PRIMARY KEY,\n    name VARCHAR UNIQUE,\n    email VARCHAR NOT NULL,\n    active bool NOT NULL DEFAULT TRUE\n);</code></pre></div>\n<br/>\n<p><code class=\"language-text\">unique</code> 속성이 있는 name 컬럼의 값이 이미 존재한다면, 아무것도 수행하지 않도록하는 SQL은 아래와 같이 쓸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">INSERT INTO customers (NAME, email)\nVALUES(&#39;Microsoft&#39;,&#39;hotline@microsoft.com&#39;) \nON CONFLICT ON CONSTRAINT customers_name_key \nDO NOTHING;</code></pre></div>\n<p><br/><br/></p>\n<p>제약조건말고 컬럼명(name)으로도 동일한 수행을 하도록 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">INSERT INTO customers (name, email)\nVALUES(&#39;Microsoft&#39;,&#39;hotline@microsoft.com&#39;) \nON CONFLICT (name) \nDO NOTHING;</code></pre></div>\n<p><br/><br/></p>\n<p>마지막으로 이미 존재하는 대상에 대해서는 <code class=\"language-text\">UPDATE</code>하도록\n<code class=\"language-text\">ACTION</code>을 주는 SQL은 <code class=\"language-text\">DO 절</code> 뒤에 수행될 UPDATE문을 작성하면 된다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">INSERT INTO customers (name, email)\nVALUES(&#39;Microsoft&#39;,&#39;hotline@microsoft.com&#39;) \nON CONFLICT (name) \nDO \n   UPDATE SET email = EXCLUDED.email || &#39;;&#39; || customers.email;</code></pre></div>\n<p><br/><br/></p>\n<hr>\n<p><br/><br/></p>\n<p>(+) 개인적으로 현업에서 <code class=\"language-text\">ON CONFLICT</code>보다 더 자주 사용하는<br>\n<code class=\"language-text\">RETURNING</code>문을 활용한 UPSERT도 있으니 비교해보고 상황에 맞는것을 사용해보자!</p>\n<p><a href=\"https://didue.github.io/postgresql-returning/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[PostgreSQL] Returning 구문으로 정보 리턴 받기\n</a></p>\n<p><br/><br/>\n+) 이 글은 <a href=\"https://fascinate-zsoo.tistory.com/24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기(이전 블로그)</a>에서 옮겨왔습니다.🙋‍♀️\n<br/><br/></p>\n<hr>\n<p><br/><br/></p>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://www.postgresqltutorial.com/postgresql-upsert/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PostgresQL API Document</a></li>\n</ul>","excerpt":"List가 없이 에디터 하나로 insert/update를 해야하는 게시판을 작성하는 업무가 있어서 찾아보다가 라는 것을 알게 되었다!  는 일종의 문 같은 개념으로(postgresql은 merge가 없음......)\n행이 없으면(존재하지않으면) IN…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/postgresql-upsert/#postgresql%EC%9D%98-upsert\">PostgresQL의 UPSERT</a></p>\n<ul>\n<li><a href=\"/postgresql-upsert/#target\">Target</a></li>\n<li><a href=\"/postgresql-upsert/#action\">Action</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/postgresql-upsert/#example\">Example</a></p>\n<ul>\n<li><a href=\"/postgresql-upsert/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/postgresql-upsert/"},"frontmatter":{"title":"(Postgresql) UPSERT 사용하기","date":"Jul 23, 2021","tags":["PostgresQL"],"keywords":["PostgresQL","UPSERT"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/postgresql-upsert/","series":[],"lastmod":"2021-07-23"}},"staticQueryHashes":["2027115977","694178885"]}